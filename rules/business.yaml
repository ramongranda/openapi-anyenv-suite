rules:
  # ========================================
  # ERROR HANDLING & PROBLEM DETAIL RULES
  # ========================================
  
  # Enforces standardized error response format using RFC 7807 Problem Details
  error-payload-is-ProblemDetail:
    description: "4xx/5xx responses must reference ProblemDetail-like schema."
    severity: error
    given: "$.paths..responses[/(4|5)\\d{2}/].content.application/json.schema.$ref"
    then:
      function: pattern
      functionOptions: { match: "^#\\/components\\/schemas\\/(Commons\\.|commons\\.)?ProblemDetail(Dto)?$" }

  # ========================================
  # DOCUMENTATION & EXAMPLES RULES
  # ========================================

  # Promotes comprehensive enum documentation for better API understanding
  enum-has-x-descriptions:
    description: "Enums should include x-enumDescriptions with same length as enum."
    severity: warn
    given: "$.components.schemas[*][?(@.enum)]"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          properties:
            enum: { type: array, minItems: 1, maxItems: 100 }
            x-enumDescriptions: { type: array, minItems: 1, maxItems: 100 }

  # ========================================
  # NAMING CONVENTIONS & CORPORATE STANDARDS
  # ========================================

  # Enforces consistent schema naming using PascalCase convention
  schema-pascal-case:
    description: "Schema names must be PascalCase."
    severity: error
    given: "$.components.schemas.*~"
    then:
      function: pattern
      functionOptions:
        match: "^[A-Z][a-zA-Z0-9]*$"

  # Enforces corporate naming convention for data transfer objects
  schema-name-suffix-dto:
    description: "Response schemas should end with 'Dto' (convention)."
    severity: warn
    given: "$.components.schemas.*~"
    then:
      function: pattern
      functionOptions: { match: "Dto$" }

  # ========================================
  # RATE LIMITING & THROTTLING RULES
  # ========================================

  # Encourages proper rate limiting documentation for public APIs
  rate-limit-429-present:
    description: "Public APIs should define 429 (Too Many Requests)."
    severity: warn
    given: "$.paths..responses"
    then:
      field: "429"
      function: truthy

  # Promotes HTTP caching best practices for better performance
  get-cache-headers-suggested:
    description: "GET responses should document ETag or Last-Modified."
    severity: warn
    given: "$.paths..get.responses.200.headers"
    then:
      function: schema
      functionOptions:
        schema:
          type: object
          anyOf:
            - required: ["ETag"]
            - required: ["Last-Modified"]
