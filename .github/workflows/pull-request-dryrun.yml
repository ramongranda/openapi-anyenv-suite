name: PR release dry-run

permissions:
  contents: read
  issues: write
  pull-requests: write

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main ]  # ⚠️ si haces PR a develop, añade 'develop' aquí

jobs:
  semantic-release-dry-run:
    if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
    name: semantic-release dry-run
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          persist-credentials: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          # semantic-release v25 requiere Node >=24.10.0
          node-version: '24.10.0'

      - name: Enable Corepack & pnpm
        run: |
          corepack enable
          corepack prepare pnpm@10.19.0 --activate

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Ensure conventional commits parser is available
        run: |
          # Install parser required by @semantic-release/commit-analyzer if not present
          corepack enable || true
          corepack prepare pnpm@10.19.0 --activate || true
          pnpm add -D --no-frozen-lockfile conventional-changelog-conventionalcommits@^4.3.0

      - name: Run semantic-release (dry-run)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Capturamos salida para comentarla en el PR
          pnpm dlx semantic-release --dry-run --debug > release-dryrun.log 2>&1 || true

      - name: Extract proposed version
        id: extract
        run: |
          set -e
          NEXT=''
          if [ -f release-dryrun.log ]; then
            # Parse release-dryrun.log with a single-line node -e to avoid heredoc/indent issues
            NEXT=$(node -e "const fs=require('fs');const s=fs.readFileSync('release-dryrun.log','utf8');const p1=/The next release version is v?([0-9]+\.[0-9]+\.[0-9]+(?:[-.][0-9A-Za-z.]+)?)/;const p2=/nextRelease[^}]*version['\"]?\s*:\s*['\"]([0-9]+\.[0-9]+\.[0-9]+(?:[-.][0-9A-Za-z.]+)?)/;const p3=/will be released as ([0-9]+\.[0-9]+\.[0-9]+(?:[-.][0-9A-Za-z.]+)?)/;const m=s.match(p1)||s.match(p2)||s.match(p3); if(m) console.log(m[1]);")
          fi
          VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "next_version=${NEXT:-unknown}" >> $GITHUB_OUTPUT

      - name: Build comment body
        id: build_comment
        run: |
          set -e
          if [ -f release-dryrun.log ]; then
            # Truncamos a ~60KB para evitar límites
            head -c 60000 release-dryrun.log > release-dryrun-trim.log || true
          else
            echo "No dry-run output found." > release-dryrun-trim.log
          fi
          NEXT=${{ steps.extract.outputs.next_version }}
          {
            echo "body<<EOF"
            echo "### semantic-release dry-run"
            echo "**Proposed version:** ${NEXT}"
            echo
            echo "<details><summary>Dry-run output (click to expand)</summary>"
            echo
            echo '<pre>'
            cat release-dryrun-trim.log
            echo '</pre>'
            echo
            echo "</details>"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Create or update PR comment with dry-run output
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.build_comment.outputs.body }}
          edit-mode: replace
