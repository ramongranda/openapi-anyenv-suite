name: Build and publish Docker image (GHCR)

on:
  push:
    branches: [ develop, main ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: openapi-anyenv-suite

jobs:
  build-and-push:
    name: Build and push image to GHCR
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'release' && github.event.release.target_commitish == 'main') || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
    outputs:
      image: ${{ steps.meta.outputs.image }}
      version: ${{ steps.meta.outputs.version }}
      pushed: ${{ steps.meta.outputs.pushed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare tags and metadata
        id: meta
        run: |
          ver=$(node -p "require('./package.json').version")
          echo "version=$ver" >> $GITHUB_OUTPUT
          image_base="ghcr.io/${GITHUB_REPOSITORY_OWNER}/${IMAGE_NAME}"
          echo "image_base=$image_base" >> $GITHUB_OUTPUT
          # Determine tags to publish based on ref
          if [[ "${GITHUB_REF}" == "refs/heads/develop" ]]; then
            # For develop branch push only 'latest'
            echo -e "tags=${image_base}:latest" >> $GITHUB_OUTPUT
            echo "image=${image_base}:latest" >> $GITHUB_OUTPUT
            echo "pushed=true" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF}" == refs/heads/main ]] || [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            # If it's a tag, ensure it matches package.json version
            if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              tagname=${GITHUB_REF#refs/tags/}
              if [[ "$tagname" != "v$ver" ]]; then
                echo "ERROR: tag $tagname does not match package.json version v$ver"
                exit 1
              fi
            fi
            # Publish both versioned tag and latest
            echo -e "tags=${image_base}:${ver}\n${image_base}:latest" >> $GITHUB_OUTPUT
            echo "image=${image_base}:${ver}" >> $GITHUB_OUTPUT
            echo "pushed=true" >> $GITHUB_OUTPUT
          else
            echo "No publish configured for ref ${GITHUB_REF}, skipping" >&2
            exit 78
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          file: ./Dockerfile

      - name: Debug outputs
        run: |
          echo "meta.version=${{ steps.meta.outputs.version }}"
          echo "meta.image=${{ steps.meta.outputs.image }}"
          echo "meta.tags:"; echo "${{ steps.meta.outputs.tags }}"

  smoke-test:
    name: Smoke test published image
    needs: build-and-push
    runs-on: ubuntu-latest
    if: ${{ needs.build-and-push.outputs.pushed == 'true' && (startsWith(github.ref, 'refs/heads/main') || startsWith(github.ref, 'refs/tags/')) }}
    steps:
      - name: Checkout (for example spec)
        uses: actions/checkout@v4

      - name: Login to GHCR (to pull image)
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull published image
        run: |
          echo "Pulling image ${{ needs.build-and-push.outputs.image }}"
          docker pull ${{ needs.build-and-push.outputs.image }}

      - name: Run smoke test (execute pnpm run check in container)
        run: |
          mkdir -p $GITHUB_WORKSPACE/dist
          docker run --rm -v "$GITHUB_WORKSPACE/example":/spec:ro -v "$GITHUB_WORKSPACE/dist":/work/dist ${{ needs.build-and-push.outputs.image }} pnpm run check -- /spec/openapi.yaml
          if [ ! -f "$GITHUB_WORKSPACE/dist/grade-report.json" ]; then echo "Smoke test failed: dist/grade-report.json not found"; exit 1; fi
