name: Open PR master â†’ develop

on:
  push:
    branches: [ master ]

jobs:
  open-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version
        id: pkg
        run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Open PR from master to develop (if none exists)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const head = `${owner}:master`;
            const base = 'develop';
            const version = process.env.VERSION || '';
            const title = version ? `chore(sync): merge master into develop (v${version})` : 'chore(sync): merge master into develop';
            const body = [
              'Automated PR to sync changes from master back into develop so version bumps and release commits are preserved.',
              version ? `\nVersion: v${version}` : '',
              '\nThis PR was auto-created after a push to master.'
            ].join('');

            const { data: pulls } = await github.rest.pulls.list({ owner, repo, state: 'open', base, head });
            if (pulls && pulls.length > 0) {
              core.info(`PR already exists: #${pulls[0].number}`);
              return;
            }
            const { data: pr } = await github.rest.pulls.create({ owner, repo, head: 'master', base, title, body });
            core.info(`Opened PR #${pr.number}`);

            // Ensure 'sync' label exists
            const labelName = 'sync';
            try {
              await github.rest.issues.getLabel({ owner, repo, name: labelName });
            } catch (e) {
              if (e.status === 404) {
                await github.rest.issues.createLabel({ owner, repo, name: labelName, color: 'ededed', description: 'Automatic synchronization PR from master to develop' }).catch(() => {});
              }
            }
            // Apply label to the PR
            await github.rest.issues.addLabels({ owner, repo, issue_number: pr.number, labels: [labelName] }).catch(() => {});

            // Request reviewer (prefer the actor; fallback to repo owner)
            const reviewer = (context.actor && context.actor !== 'github-actions[bot]') ? context.actor : owner;
            try {
              await github.rest.pulls.requestReviewers({ owner, repo, pull_number: pr.number, reviewers: [reviewer] });
            } catch (e) {
              core.info(`Could not request reviewer (${reviewer}): ${e.message}`);
            }
